#!/bin/bash -ex
# User data script

# Log output to the console, syslog, and /var/log/user-data.log
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# Download and extract the clean image
image=/mnt/<%= image_name %>.img
imagedir=/mnt/<%= image_name %>
wget -qO- <%= image_url %> | tar xzf - -C /mnt

# The image is 1.4GB by default
# Add 4GB for good measure
dd if=/dev/zero bs=1024k count=4096 >> $image
e2fsck -p -f $image
resize2fs $image

# Mount the image
mkdir -p $imagedir
mount -o loop $image $imagedir

# Allow network access from chroot environment
# cp fails because the symlink reference doesn't exist. Create a backup for now.
if [ -e $imagedir/etc/resolve.conf -o -h $imagedir/etc/resolve.conf]; then 
  mv $imagedir/etc/resolv.conf $imagedir/etc/resolv.conf.bak; 
fi
cp /etc/resolv.conf $imagedir/etc/
chmod 644 $imagedir/etc/resolv.conf 

# Chroot needs these to function properly
mount -t proc none $imagedir/proc/
mount -t sysfs none $imagedir/sys/
mount -o bind /dev $imagedir/dev/

# prevent daemons from starting during apt-get 
cat <<EOF | tee $imagedir/usr/sbin/policy-rc.d > /dev/null
#!/bin/sh
exit 101
EOF

chmod 755 $imagedir/usr/sbin/policy-rc.d

chroot $imagedir apt-get update
chroot $imagedir apt-get dist-upgrade -y

# RUN CUSTOM USER SCRIPT
cat <<CUSTOM_SCRIPT_EOF > $imagedir/tmp/custom_user_script
<%= custom_user_script %>
CUSTOM_SCRIPT_EOF

chmod +x $imagedir/tmp/custom_user_script
chroot $imagedir /tmp/custom_user_script
# END CUSTOM USER SCRIPT

# Put resolv.conf symlink back in place
rm -rf  $imagedir/etc/resolve.conf
if [ -e $imagedir/etc/resolve.conf.bak ]; then mv $imagedir/etc/resolv.conf.bak $imagedir/etc/resolv.conf; fi

# Clean up chroot environment
chroot $imagedir umount /proc

# Clean up policy-rc.d
rm -f $imagedir/usr/sbin/policy-rc.d

# Wait for EBS volume to be attached
dev=<%= ebs_device %>

# Device names changed in precise/sid. lsb_release modules arent loaded so use debian_version.
codename=$(cat /etc/debian_version)
if [ "$codename" == "wheezy/sid" ]; then
    dev="/dev/xvdi"
fi

while [ ! -e $dev ]; do sleep 1; done

# We need to lazy umount from our chroot environment.
umount -l $imagedir/sys
umount -l $imagedir/dev
umount -l $imagedir/proc

# Format and mount the EBS volume
mkfs.ext4 -L cloudimg-rootfs $dev
ebsimagedir=$imagedir-ebs
mkdir $ebsimagedir
mount $dev $ebsimagedir

# Copy file system from temporary rootdir to EBS volume
tar -cpSf - -C $imagedir . | tar pxvf - -C $ebsimagedir

# Unmount 
umount -l $imagedir
umount -l $ebsimagedir

# Shutdown to signal success
shutdown -h now
